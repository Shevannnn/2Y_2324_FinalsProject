#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _2Y_2324_FinalsProject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Finals")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBloodType(BloodType instance);
    partial void UpdateBloodType(BloodType instance);
    partial void DeleteBloodType(BloodType instance);
    partial void InsertHealthInfo(HealthInfo instance);
    partial void UpdateHealthInfo(HealthInfo instance);
    partial void DeleteHealthInfo(HealthInfo instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPatientStatus(PatientStatus instance);
    partial void UpdatePatientStatus(PatientStatus instance);
    partial void DeletePatientStatus(PatientStatus instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStaffRole(StaffRole instance);
    partial void UpdateStaffRole(StaffRole instance);
    partial void DeleteStaffRole(StaffRole instance);
    partial void InsertStaffStatus(StaffStatus instance);
    partial void UpdateStaffStatus(StaffStatus instance);
    partial void DeleteStaffStatus(StaffStatus instance);
    partial void InsertVital(Vital instance);
    partial void UpdateVital(Vital instance);
    partial void DeleteVital(Vital instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::_2Y_2324_FinalsProject.Properties.Settings.Default.FinalsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BloodType> BloodTypes
		{
			get
			{
				return this.GetTable<BloodType>();
			}
		}
		
		public System.Data.Linq.Table<HealthInfo> HealthInfos
		{
			get
			{
				return this.GetTable<HealthInfo>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<PatientStatus> PatientStatus
		{
			get
			{
				return this.GetTable<PatientStatus>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<StaffRole> StaffRoles
		{
			get
			{
				return this.GetTable<StaffRole>();
			}
		}
		
		public System.Data.Linq.Table<StaffStatus> StaffStatus
		{
			get
			{
				return this.GetTable<StaffStatus>();
			}
		}
		
		public System.Data.Linq.Table<Vital> Vitals
		{
			get
			{
				return this.GetTable<Vital>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BloodType")]
	public partial class BloodType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BloodType_Id;
		
		private string _BloodType_Desc;
		
		private EntitySet<Patient> _Patients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBloodType_IdChanging(string value);
    partial void OnBloodType_IdChanged();
    partial void OnBloodType_DescChanging(string value);
    partial void OnBloodType_DescChanged();
    #endregion
		
		public BloodType()
		{
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BloodType_Id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string BloodType_Id
		{
			get
			{
				return this._BloodType_Id;
			}
			set
			{
				if ((this._BloodType_Id != value))
				{
					this.OnBloodType_IdChanging(value);
					this.SendPropertyChanging();
					this._BloodType_Id = value;
					this.SendPropertyChanged("BloodType_Id");
					this.OnBloodType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BloodType_Desc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BloodType_Desc
		{
			get
			{
				return this._BloodType_Desc;
			}
			set
			{
				if ((this._BloodType_Desc != value))
				{
					this.OnBloodType_DescChanging(value);
					this.SendPropertyChanging();
					this._BloodType_Desc = value;
					this.SendPropertyChanged("BloodType_Desc");
					this.OnBloodType_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BloodType_Patient", Storage="_Patients", ThisKey="BloodType_Id", OtherKey="BloodType_Id")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.BloodType = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.BloodType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HealthInfo")]
	public partial class HealthInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HealthInfo_Id;
		
		private string _Patient_Id;
		
		private string _HealthInfo_Medications;
		
		private string _HealthInfo_Allergies;
		
		private string _HealthInfo_Surgeries;
		
		private string _HealthInfo_FamilyHistory;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHealthInfo_IdChanging(string value);
    partial void OnHealthInfo_IdChanged();
    partial void OnPatient_IdChanging(string value);
    partial void OnPatient_IdChanged();
    partial void OnHealthInfo_MedicationsChanging(string value);
    partial void OnHealthInfo_MedicationsChanged();
    partial void OnHealthInfo_AllergiesChanging(string value);
    partial void OnHealthInfo_AllergiesChanged();
    partial void OnHealthInfo_SurgeriesChanging(string value);
    partial void OnHealthInfo_SurgeriesChanged();
    partial void OnHealthInfo_FamilyHistoryChanging(string value);
    partial void OnHealthInfo_FamilyHistoryChanged();
    #endregion
		
		public HealthInfo()
		{
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthInfo_Id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HealthInfo_Id
		{
			get
			{
				return this._HealthInfo_Id;
			}
			set
			{
				if ((this._HealthInfo_Id != value))
				{
					this.OnHealthInfo_IdChanging(value);
					this.SendPropertyChanging();
					this._HealthInfo_Id = value;
					this.SendPropertyChanged("HealthInfo_Id");
					this.OnHealthInfo_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Id", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Patient_Id
		{
			get
			{
				return this._Patient_Id;
			}
			set
			{
				if ((this._Patient_Id != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatient_IdChanging(value);
					this.SendPropertyChanging();
					this._Patient_Id = value;
					this.SendPropertyChanged("Patient_Id");
					this.OnPatient_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthInfo_Medications", DbType="VarChar(50)")]
		public string HealthInfo_Medications
		{
			get
			{
				return this._HealthInfo_Medications;
			}
			set
			{
				if ((this._HealthInfo_Medications != value))
				{
					this.OnHealthInfo_MedicationsChanging(value);
					this.SendPropertyChanging();
					this._HealthInfo_Medications = value;
					this.SendPropertyChanged("HealthInfo_Medications");
					this.OnHealthInfo_MedicationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthInfo_Allergies", DbType="VarChar(50)")]
		public string HealthInfo_Allergies
		{
			get
			{
				return this._HealthInfo_Allergies;
			}
			set
			{
				if ((this._HealthInfo_Allergies != value))
				{
					this.OnHealthInfo_AllergiesChanging(value);
					this.SendPropertyChanging();
					this._HealthInfo_Allergies = value;
					this.SendPropertyChanged("HealthInfo_Allergies");
					this.OnHealthInfo_AllergiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthInfo_Surgeries", DbType="VarChar(50)")]
		public string HealthInfo_Surgeries
		{
			get
			{
				return this._HealthInfo_Surgeries;
			}
			set
			{
				if ((this._HealthInfo_Surgeries != value))
				{
					this.OnHealthInfo_SurgeriesChanging(value);
					this.SendPropertyChanging();
					this._HealthInfo_Surgeries = value;
					this.SendPropertyChanged("HealthInfo_Surgeries");
					this.OnHealthInfo_SurgeriesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthInfo_FamilyHistory", DbType="VarChar(100)")]
		public string HealthInfo_FamilyHistory
		{
			get
			{
				return this._HealthInfo_FamilyHistory;
			}
			set
			{
				if ((this._HealthInfo_FamilyHistory != value))
				{
					this.OnHealthInfo_FamilyHistoryChanging(value);
					this.SendPropertyChanging();
					this._HealthInfo_FamilyHistory = value;
					this.SendPropertyChanged("HealthInfo_FamilyHistory");
					this.OnHealthInfo_FamilyHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_HealthInfo", Storage="_Patient", ThisKey="Patient_Id", OtherKey="Patient_Id", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.HealthInfos.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.HealthInfos.Add(this);
						this._Patient_Id = value.Patient_Id;
					}
					else
					{
						this._Patient_Id = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Patient_Id;
		
		private string _Patient_Name;
		
		private string _Patient_Sex;
		
		private System.Nullable<int> _Patient_Height;
		
		private System.Nullable<int> _Patient_Weight;
		
		private System.Nullable<int> _Patient_Age;
		
		private System.Nullable<System.DateTime> _Patient_Birth;
		
		private string _BloodType_Id;
		
		private string _Patient_EmergencyContactName;
		
		private string _Patient_EmergencyContactNum;
		
		private string _PatientStatus_Id;
		
		private string _Patient_Image;
		
		private string _Staff_Id;
		
		private EntitySet<HealthInfo> _HealthInfos;
		
		private EntitySet<Vital> _Vitals;
		
		private EntityRef<BloodType> _BloodType;
		
		private EntityRef<PatientStatus> _PatientStatus;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatient_IdChanging(string value);
    partial void OnPatient_IdChanged();
    partial void OnPatient_NameChanging(string value);
    partial void OnPatient_NameChanged();
    partial void OnPatient_SexChanging(string value);
    partial void OnPatient_SexChanged();
    partial void OnPatient_HeightChanging(System.Nullable<int> value);
    partial void OnPatient_HeightChanged();
    partial void OnPatient_WeightChanging(System.Nullable<int> value);
    partial void OnPatient_WeightChanged();
    partial void OnPatient_AgeChanging(System.Nullable<int> value);
    partial void OnPatient_AgeChanged();
    partial void OnPatient_BirthChanging(System.Nullable<System.DateTime> value);
    partial void OnPatient_BirthChanged();
    partial void OnBloodType_IdChanging(string value);
    partial void OnBloodType_IdChanged();
    partial void OnPatient_EmergencyContactNameChanging(string value);
    partial void OnPatient_EmergencyContactNameChanged();
    partial void OnPatient_EmergencyContactNumChanging(string value);
    partial void OnPatient_EmergencyContactNumChanged();
    partial void OnPatientStatus_IdChanging(string value);
    partial void OnPatientStatus_IdChanged();
    partial void OnPatient_ImageChanging(string value);
    partial void OnPatient_ImageChanged();
    partial void OnStaff_IdChanging(string value);
    partial void OnStaff_IdChanged();
    #endregion
		
		public Patient()
		{
			this._HealthInfos = new EntitySet<HealthInfo>(new Action<HealthInfo>(this.attach_HealthInfos), new Action<HealthInfo>(this.detach_HealthInfos));
			this._Vitals = new EntitySet<Vital>(new Action<Vital>(this.attach_Vitals), new Action<Vital>(this.detach_Vitals));
			this._BloodType = default(EntityRef<BloodType>);
			this._PatientStatus = default(EntityRef<PatientStatus>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Patient_Id
		{
			get
			{
				return this._Patient_Id;
			}
			set
			{
				if ((this._Patient_Id != value))
				{
					this.OnPatient_IdChanging(value);
					this.SendPropertyChanging();
					this._Patient_Id = value;
					this.SendPropertyChanged("Patient_Id");
					this.OnPatient_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Patient_Name
		{
			get
			{
				return this._Patient_Name;
			}
			set
			{
				if ((this._Patient_Name != value))
				{
					this.OnPatient_NameChanging(value);
					this.SendPropertyChanging();
					this._Patient_Name = value;
					this.SendPropertyChanged("Patient_Name");
					this.OnPatient_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Sex", DbType="VarChar(50)")]
		public string Patient_Sex
		{
			get
			{
				return this._Patient_Sex;
			}
			set
			{
				if ((this._Patient_Sex != value))
				{
					this.OnPatient_SexChanging(value);
					this.SendPropertyChanging();
					this._Patient_Sex = value;
					this.SendPropertyChanged("Patient_Sex");
					this.OnPatient_SexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Height", DbType="Int")]
		public System.Nullable<int> Patient_Height
		{
			get
			{
				return this._Patient_Height;
			}
			set
			{
				if ((this._Patient_Height != value))
				{
					this.OnPatient_HeightChanging(value);
					this.SendPropertyChanging();
					this._Patient_Height = value;
					this.SendPropertyChanged("Patient_Height");
					this.OnPatient_HeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Weight", DbType="Int")]
		public System.Nullable<int> Patient_Weight
		{
			get
			{
				return this._Patient_Weight;
			}
			set
			{
				if ((this._Patient_Weight != value))
				{
					this.OnPatient_WeightChanging(value);
					this.SendPropertyChanging();
					this._Patient_Weight = value;
					this.SendPropertyChanged("Patient_Weight");
					this.OnPatient_WeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Age", DbType="Int")]
		public System.Nullable<int> Patient_Age
		{
			get
			{
				return this._Patient_Age;
			}
			set
			{
				if ((this._Patient_Age != value))
				{
					this.OnPatient_AgeChanging(value);
					this.SendPropertyChanging();
					this._Patient_Age = value;
					this.SendPropertyChanged("Patient_Age");
					this.OnPatient_AgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Birth", DbType="Date")]
		public System.Nullable<System.DateTime> Patient_Birth
		{
			get
			{
				return this._Patient_Birth;
			}
			set
			{
				if ((this._Patient_Birth != value))
				{
					this.OnPatient_BirthChanging(value);
					this.SendPropertyChanging();
					this._Patient_Birth = value;
					this.SendPropertyChanged("Patient_Birth");
					this.OnPatient_BirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BloodType_Id", DbType="VarChar(50)")]
		public string BloodType_Id
		{
			get
			{
				return this._BloodType_Id;
			}
			set
			{
				if ((this._BloodType_Id != value))
				{
					if (this._BloodType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBloodType_IdChanging(value);
					this.SendPropertyChanging();
					this._BloodType_Id = value;
					this.SendPropertyChanged("BloodType_Id");
					this.OnBloodType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_EmergencyContactName", DbType="VarChar(50)")]
		public string Patient_EmergencyContactName
		{
			get
			{
				return this._Patient_EmergencyContactName;
			}
			set
			{
				if ((this._Patient_EmergencyContactName != value))
				{
					this.OnPatient_EmergencyContactNameChanging(value);
					this.SendPropertyChanging();
					this._Patient_EmergencyContactName = value;
					this.SendPropertyChanged("Patient_EmergencyContactName");
					this.OnPatient_EmergencyContactNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_EmergencyContactNum", DbType="VarChar(50)")]
		public string Patient_EmergencyContactNum
		{
			get
			{
				return this._Patient_EmergencyContactNum;
			}
			set
			{
				if ((this._Patient_EmergencyContactNum != value))
				{
					this.OnPatient_EmergencyContactNumChanging(value);
					this.SendPropertyChanging();
					this._Patient_EmergencyContactNum = value;
					this.SendPropertyChanged("Patient_EmergencyContactNum");
					this.OnPatient_EmergencyContactNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientStatus_Id", DbType="VarChar(50)")]
		public string PatientStatus_Id
		{
			get
			{
				return this._PatientStatus_Id;
			}
			set
			{
				if ((this._PatientStatus_Id != value))
				{
					if (this._PatientStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientStatus_IdChanging(value);
					this.SendPropertyChanging();
					this._PatientStatus_Id = value;
					this.SendPropertyChanged("PatientStatus_Id");
					this.OnPatientStatus_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Image", DbType="VarChar(100)")]
		public string Patient_Image
		{
			get
			{
				return this._Patient_Image;
			}
			set
			{
				if ((this._Patient_Image != value))
				{
					this.OnPatient_ImageChanging(value);
					this.SendPropertyChanging();
					this._Patient_Image = value;
					this.SendPropertyChanged("Patient_Image");
					this.OnPatient_ImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Id", DbType="VarChar(50)")]
		public string Staff_Id
		{
			get
			{
				return this._Staff_Id;
			}
			set
			{
				if ((this._Staff_Id != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaff_IdChanging(value);
					this.SendPropertyChanging();
					this._Staff_Id = value;
					this.SendPropertyChanged("Staff_Id");
					this.OnStaff_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_HealthInfo", Storage="_HealthInfos", ThisKey="Patient_Id", OtherKey="Patient_Id")]
		public EntitySet<HealthInfo> HealthInfos
		{
			get
			{
				return this._HealthInfos;
			}
			set
			{
				this._HealthInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Vital", Storage="_Vitals", ThisKey="Patient_Id", OtherKey="Patient_Id")]
		public EntitySet<Vital> Vitals
		{
			get
			{
				return this._Vitals;
			}
			set
			{
				this._Vitals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BloodType_Patient", Storage="_BloodType", ThisKey="BloodType_Id", OtherKey="BloodType_Id", IsForeignKey=true)]
		public BloodType BloodType
		{
			get
			{
				return this._BloodType.Entity;
			}
			set
			{
				BloodType previousValue = this._BloodType.Entity;
				if (((previousValue != value) 
							|| (this._BloodType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BloodType.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._BloodType.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._BloodType_Id = value.BloodType_Id;
					}
					else
					{
						this._BloodType_Id = default(string);
					}
					this.SendPropertyChanged("BloodType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientStatus_Patient", Storage="_PatientStatus", ThisKey="PatientStatus_Id", OtherKey="PatientStatus_Id", IsForeignKey=true)]
		public PatientStatus PatientStatus
		{
			get
			{
				return this._PatientStatus.Entity;
			}
			set
			{
				PatientStatus previousValue = this._PatientStatus.Entity;
				if (((previousValue != value) 
							|| (this._PatientStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatientStatus.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._PatientStatus.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._PatientStatus_Id = value.PatientStatus_Id;
					}
					else
					{
						this._PatientStatus_Id = default(string);
					}
					this.SendPropertyChanged("PatientStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Patient", Storage="_Staff", ThisKey="Staff_Id", OtherKey="Staff_Id", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._Staff_Id = value.Staff_Id;
					}
					else
					{
						this._Staff_Id = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HealthInfos(HealthInfo entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_HealthInfos(HealthInfo entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_Vitals(Vital entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Vitals(Vital entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientStatus")]
	public partial class PatientStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PatientStatus_Id;
		
		private string _PatientStatus_Desc;
		
		private EntitySet<Patient> _Patients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientStatus_IdChanging(string value);
    partial void OnPatientStatus_IdChanged();
    partial void OnPatientStatus_DescChanging(string value);
    partial void OnPatientStatus_DescChanged();
    #endregion
		
		public PatientStatus()
		{
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientStatus_Id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PatientStatus_Id
		{
			get
			{
				return this._PatientStatus_Id;
			}
			set
			{
				if ((this._PatientStatus_Id != value))
				{
					this.OnPatientStatus_IdChanging(value);
					this.SendPropertyChanging();
					this._PatientStatus_Id = value;
					this.SendPropertyChanged("PatientStatus_Id");
					this.OnPatientStatus_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientStatus_Desc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PatientStatus_Desc
		{
			get
			{
				return this._PatientStatus_Desc;
			}
			set
			{
				if ((this._PatientStatus_Desc != value))
				{
					this.OnPatientStatus_DescChanging(value);
					this.SendPropertyChanging();
					this._PatientStatus_Desc = value;
					this.SendPropertyChanged("PatientStatus_Desc");
					this.OnPatientStatus_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientStatus_Patient", Storage="_Patients", ThisKey="PatientStatus_Id", OtherKey="PatientStatus_Id")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.PatientStatus = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.PatientStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Staff_Id;
		
		private string _Staff_Name;
		
		private string _Staff_Password;
		
		private string _StaffRole_Id;
		
		private string _StaffStatus_Id;
		
		private EntitySet<Patient> _Patients;
		
		private EntityRef<StaffRole> _StaffRole;
		
		private EntityRef<StaffStatus> _StaffStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaff_IdChanging(string value);
    partial void OnStaff_IdChanged();
    partial void OnStaff_NameChanging(string value);
    partial void OnStaff_NameChanged();
    partial void OnStaff_PasswordChanging(string value);
    partial void OnStaff_PasswordChanged();
    partial void OnStaffRole_IdChanging(string value);
    partial void OnStaffRole_IdChanged();
    partial void OnStaffStatus_IdChanging(string value);
    partial void OnStaffStatus_IdChanged();
    #endregion
		
		public Staff()
		{
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			this._StaffRole = default(EntityRef<StaffRole>);
			this._StaffStatus = default(EntityRef<StaffStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Staff_Id
		{
			get
			{
				return this._Staff_Id;
			}
			set
			{
				if ((this._Staff_Id != value))
				{
					this.OnStaff_IdChanging(value);
					this.SendPropertyChanging();
					this._Staff_Id = value;
					this.SendPropertyChanged("Staff_Id");
					this.OnStaff_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_Name
		{
			get
			{
				return this._Staff_Name;
			}
			set
			{
				if ((this._Staff_Name != value))
				{
					this.OnStaff_NameChanging(value);
					this.SendPropertyChanging();
					this._Staff_Name = value;
					this.SendPropertyChanged("Staff_Name");
					this.OnStaff_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_Password
		{
			get
			{
				return this._Staff_Password;
			}
			set
			{
				if ((this._Staff_Password != value))
				{
					this.OnStaff_PasswordChanging(value);
					this.SendPropertyChanging();
					this._Staff_Password = value;
					this.SendPropertyChanged("Staff_Password");
					this.OnStaff_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffRole_Id", DbType="VarChar(50)")]
		public string StaffRole_Id
		{
			get
			{
				return this._StaffRole_Id;
			}
			set
			{
				if ((this._StaffRole_Id != value))
				{
					if (this._StaffRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffRole_IdChanging(value);
					this.SendPropertyChanging();
					this._StaffRole_Id = value;
					this.SendPropertyChanged("StaffRole_Id");
					this.OnStaffRole_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffStatus_Id", DbType="VarChar(50)")]
		public string StaffStatus_Id
		{
			get
			{
				return this._StaffStatus_Id;
			}
			set
			{
				if ((this._StaffStatus_Id != value))
				{
					if (this._StaffStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffStatus_IdChanging(value);
					this.SendPropertyChanging();
					this._StaffStatus_Id = value;
					this.SendPropertyChanged("StaffStatus_Id");
					this.OnStaffStatus_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Patient", Storage="_Patients", ThisKey="Staff_Id", OtherKey="Staff_Id")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffRole_Staff", Storage="_StaffRole", ThisKey="StaffRole_Id", OtherKey="StaffRole_Id", IsForeignKey=true)]
		public StaffRole StaffRole
		{
			get
			{
				return this._StaffRole.Entity;
			}
			set
			{
				StaffRole previousValue = this._StaffRole.Entity;
				if (((previousValue != value) 
							|| (this._StaffRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffRole.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._StaffRole.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._StaffRole_Id = value.StaffRole_Id;
					}
					else
					{
						this._StaffRole_Id = default(string);
					}
					this.SendPropertyChanged("StaffRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffStatus_Staff", Storage="_StaffStatus", ThisKey="StaffStatus_Id", OtherKey="StaffStatus_Id", IsForeignKey=true)]
		public StaffStatus StaffStatus
		{
			get
			{
				return this._StaffStatus.Entity;
			}
			set
			{
				StaffStatus previousValue = this._StaffStatus.Entity;
				if (((previousValue != value) 
							|| (this._StaffStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffStatus.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._StaffStatus.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._StaffStatus_Id = value.StaffStatus_Id;
					}
					else
					{
						this._StaffStatus_Id = default(string);
					}
					this.SendPropertyChanged("StaffStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaffRole")]
	public partial class StaffRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StaffRole_Id;
		
		private string _StaffRole_Desc;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffRole_IdChanging(string value);
    partial void OnStaffRole_IdChanged();
    partial void OnStaffRole_DescChanging(string value);
    partial void OnStaffRole_DescChanged();
    #endregion
		
		public StaffRole()
		{
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffRole_Id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StaffRole_Id
		{
			get
			{
				return this._StaffRole_Id;
			}
			set
			{
				if ((this._StaffRole_Id != value))
				{
					this.OnStaffRole_IdChanging(value);
					this.SendPropertyChanging();
					this._StaffRole_Id = value;
					this.SendPropertyChanged("StaffRole_Id");
					this.OnStaffRole_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffRole_Desc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StaffRole_Desc
		{
			get
			{
				return this._StaffRole_Desc;
			}
			set
			{
				if ((this._StaffRole_Desc != value))
				{
					this.OnStaffRole_DescChanging(value);
					this.SendPropertyChanging();
					this._StaffRole_Desc = value;
					this.SendPropertyChanged("StaffRole_Desc");
					this.OnStaffRole_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffRole_Staff", Storage="_Staffs", ThisKey="StaffRole_Id", OtherKey="StaffRole_Id")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.StaffRole = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.StaffRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaffStatus")]
	public partial class StaffStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StaffStatus_Id;
		
		private string _StaffStatus_Desc;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffStatus_IdChanging(string value);
    partial void OnStaffStatus_IdChanged();
    partial void OnStaffStatus_DescChanging(string value);
    partial void OnStaffStatus_DescChanged();
    #endregion
		
		public StaffStatus()
		{
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffStatus_Id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StaffStatus_Id
		{
			get
			{
				return this._StaffStatus_Id;
			}
			set
			{
				if ((this._StaffStatus_Id != value))
				{
					this.OnStaffStatus_IdChanging(value);
					this.SendPropertyChanging();
					this._StaffStatus_Id = value;
					this.SendPropertyChanged("StaffStatus_Id");
					this.OnStaffStatus_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffStatus_Desc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StaffStatus_Desc
		{
			get
			{
				return this._StaffStatus_Desc;
			}
			set
			{
				if ((this._StaffStatus_Desc != value))
				{
					this.OnStaffStatus_DescChanging(value);
					this.SendPropertyChanging();
					this._StaffStatus_Desc = value;
					this.SendPropertyChanged("StaffStatus_Desc");
					this.OnStaffStatus_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffStatus_Staff", Storage="_Staffs", ThisKey="StaffStatus_Id", OtherKey="StaffStatus_Id")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.StaffStatus = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.StaffStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vitals")]
	public partial class Vital : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Vitals_Id;
		
		private string _Patient_Id;
		
		private System.Nullable<System.DateTime> _Checkup_Date;
		
		private System.Nullable<int> _Patient_Temp;
		
		private System.Nullable<int> _Patient_PulseRate;
		
		private System.Nullable<int> _Patient_Respiration;
		
		private System.Nullable<int> _Patient_Systolic;
		
		private System.Nullable<int> _Patient_Diastolic;
		
		private string _Staff_Id;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVitals_IdChanging(string value);
    partial void OnVitals_IdChanged();
    partial void OnPatient_IdChanging(string value);
    partial void OnPatient_IdChanged();
    partial void OnCheckup_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCheckup_DateChanged();
    partial void OnPatient_TempChanging(System.Nullable<int> value);
    partial void OnPatient_TempChanged();
    partial void OnPatient_PulseRateChanging(System.Nullable<int> value);
    partial void OnPatient_PulseRateChanged();
    partial void OnPatient_RespirationChanging(System.Nullable<int> value);
    partial void OnPatient_RespirationChanged();
    partial void OnPatient_SystolicChanging(System.Nullable<int> value);
    partial void OnPatient_SystolicChanged();
    partial void OnPatient_DiastolicChanging(System.Nullable<int> value);
    partial void OnPatient_DiastolicChanged();
    partial void OnStaff_IdChanging(string value);
    partial void OnStaff_IdChanged();
    #endregion
		
		public Vital()
		{
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vitals_Id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Vitals_Id
		{
			get
			{
				return this._Vitals_Id;
			}
			set
			{
				if ((this._Vitals_Id != value))
				{
					this.OnVitals_IdChanging(value);
					this.SendPropertyChanging();
					this._Vitals_Id = value;
					this.SendPropertyChanged("Vitals_Id");
					this.OnVitals_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Id", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Patient_Id
		{
			get
			{
				return this._Patient_Id;
			}
			set
			{
				if ((this._Patient_Id != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatient_IdChanging(value);
					this.SendPropertyChanging();
					this._Patient_Id = value;
					this.SendPropertyChanged("Patient_Id");
					this.OnPatient_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Checkup_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Checkup_Date
		{
			get
			{
				return this._Checkup_Date;
			}
			set
			{
				if ((this._Checkup_Date != value))
				{
					this.OnCheckup_DateChanging(value);
					this.SendPropertyChanging();
					this._Checkup_Date = value;
					this.SendPropertyChanged("Checkup_Date");
					this.OnCheckup_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Temp", DbType="Int")]
		public System.Nullable<int> Patient_Temp
		{
			get
			{
				return this._Patient_Temp;
			}
			set
			{
				if ((this._Patient_Temp != value))
				{
					this.OnPatient_TempChanging(value);
					this.SendPropertyChanging();
					this._Patient_Temp = value;
					this.SendPropertyChanged("Patient_Temp");
					this.OnPatient_TempChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_PulseRate", DbType="Int")]
		public System.Nullable<int> Patient_PulseRate
		{
			get
			{
				return this._Patient_PulseRate;
			}
			set
			{
				if ((this._Patient_PulseRate != value))
				{
					this.OnPatient_PulseRateChanging(value);
					this.SendPropertyChanging();
					this._Patient_PulseRate = value;
					this.SendPropertyChanged("Patient_PulseRate");
					this.OnPatient_PulseRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Respiration", DbType="Int")]
		public System.Nullable<int> Patient_Respiration
		{
			get
			{
				return this._Patient_Respiration;
			}
			set
			{
				if ((this._Patient_Respiration != value))
				{
					this.OnPatient_RespirationChanging(value);
					this.SendPropertyChanging();
					this._Patient_Respiration = value;
					this.SendPropertyChanged("Patient_Respiration");
					this.OnPatient_RespirationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Systolic", DbType="Int")]
		public System.Nullable<int> Patient_Systolic
		{
			get
			{
				return this._Patient_Systolic;
			}
			set
			{
				if ((this._Patient_Systolic != value))
				{
					this.OnPatient_SystolicChanging(value);
					this.SendPropertyChanging();
					this._Patient_Systolic = value;
					this.SendPropertyChanged("Patient_Systolic");
					this.OnPatient_SystolicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Diastolic", DbType="Int")]
		public System.Nullable<int> Patient_Diastolic
		{
			get
			{
				return this._Patient_Diastolic;
			}
			set
			{
				if ((this._Patient_Diastolic != value))
				{
					this.OnPatient_DiastolicChanging(value);
					this.SendPropertyChanging();
					this._Patient_Diastolic = value;
					this.SendPropertyChanged("Patient_Diastolic");
					this.OnPatient_DiastolicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Id", DbType="VarChar(50)")]
		public string Staff_Id
		{
			get
			{
				return this._Staff_Id;
			}
			set
			{
				if ((this._Staff_Id != value))
				{
					this.OnStaff_IdChanging(value);
					this.SendPropertyChanging();
					this._Staff_Id = value;
					this.SendPropertyChanged("Staff_Id");
					this.OnStaff_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Vital", Storage="_Patient", ThisKey="Patient_Id", OtherKey="Patient_Id", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Vitals.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Vitals.Add(this);
						this._Patient_Id = value.Patient_Id;
					}
					else
					{
						this._Patient_Id = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
